using System.Reflection;
using MelonLoader;
using Harmony;
using VRC.Core;
using VRC.Networking;

namespace AntiUdonExploits
{
    public static class ModInfo
    {
        public const string NAME = "AntiUdonExploits";
        public const string VERSION = "1.0.0";
    }

    public class Main : MelonMod
    {
        public override void OnApplicationStart()
        {
            MelonPrefs.RegisterCategory("AntiUdonExploits", "Anti Udon Exploits");
            MelonPrefs.RegisterBool("AntiUdonExploits", "Enabled", true);
            MelonPrefs.RegisterBool("AntiUdonExploits", "PublicInstancesOnly", true, "Public Instances Only");

            _enabled = MelonPrefs.GetBool("AntiUdonExploits", "Enabled");
            _publicInstancesOnly = MelonPrefs.GetBool("AntiUdonExploits", "PublicInstancesOnly");

            HarmonyInstance harmony = HarmonyInstance.Create("AntiUdonExploits");
            harmony.Patch(typeof(UdonSync).GetMethod(nameof(UdonSync.UdonSyncRunProgramAsRPC)), GetPatch(nameof(Main.UdonSyncPatch)));
        }

        public override void OnModSettingsApplied()
        {
            _enabled = MelonPrefs.GetBool("AntiUdonExploits", "Enabled");
            _publicInstancesOnly = MelonPrefs.GetBool("AntiUdonExploits", "PublicInstancesOnly");
        }

        private static HarmonyMethod GetPatch(string name)
        {
            return new HarmonyMethod(typeof(Main).GetMethod(name, BindingFlags.NonPublic | BindingFlags.Static));
        }

        private static bool UdonSyncPatch(string __0)
        {
            if (__0 == "_interact" && _enabled && (!_publicInstancesOnly || RoomManagerBase.field_Internal_Static_ApiWorld_0?.currentInstanceAccess == ApiWorldInstance.AccessType.Public))
            {
                return false;
            }
            return true;
        }

        private static bool _enabled;
        private static bool _publicInstancesOnly;
    }
}
