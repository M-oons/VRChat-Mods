using System.Linq;
using System.Reflection;
using MelonLoader;
using UnhollowerRuntimeLib.XrefScans;
using Harmony;
using VRC.SDKBase;

namespace AntiUdonExploits
{
    public static class ModInfo
    {
        public const string NAME = "AntiUdonExploits";
        public const string VERSION = "1.0.0";
    }

    public class Main : MelonMod
    {
        public override void OnApplicationStart()
        {
            if (HandleEventMethod == null)
            {
                MelonLogger.LogError("Couldn't find VRC_EventDispatcherRFC method to patch.");
                return;
            }
            HarmonyInstance harmony = HarmonyInstance.Create("AntiUdonExploits");
            harmony.Patch(typeof(VRC_EventDispatcherRFC).GetMethod(HandleEventMethod.Name), GetPatch(nameof(Main.HandleEventPatch)));
        }

        private static HarmonyMethod GetPatch(string name)
        {
            return new HarmonyMethod(typeof(Main).GetMethod(name, BindingFlags.NonPublic | BindingFlags.Static));
        }

        private static bool HandleEventPatch(VRC_EventHandler.VrcEvent __1)
        {
            if (__1.EventType == VRC_EventHandler.VrcEventType.SendRPC &&
                __1.ParameterString == "UdonSyncRunProgramAsRPC" &&
                Networking.DecodeParameters(__1.ParameterBytes).FirstOrDefault()?.ToString() == "_interact")
            {
                return false;
            }
            return true;
        }

        public static MethodInfo HandleEventMethod
        {
            get
            {
                if (_handleEvent == null)
                {
                    var xrefs = XrefScanner.XrefScan(typeof(VRC_EventDispatcherRFC).GetMethod(nameof(VRC_EventDispatcherRFC.TriggerEvent)));
                    foreach (var x in xrefs)
                    {
                        if (x.Type == XrefType.Method && x.TryResolve() != null && x.TryResolve().DeclaringType == typeof(VRC_EventDispatcherRFC))
                        {
                            _handleEvent = (MethodInfo)x.TryResolve();
                            return _handleEvent;
                        }
                    }
                }
                return _handleEvent;
            }
        }

        private static MethodInfo _handleEvent;
    }
}
